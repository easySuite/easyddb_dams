<?php
/**
 * @file
 * EASYDDB DAMS Media Tracker module.
 */

/**
 * Implements hook_menu().
 */
function dams_media_tracker_menu() {
  $items = array();

  // We could re-use the file/%file/edit path for the modal callback, but
  // it is just easier to use our own namespace here.
  $items['media/%file/track'] = array(
    'title' => 'Track',
    'page callback' => 'dams_media_tracker_track_modal',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'access arguments' => array('edit'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Helper function to get media objects from a given text.
 */
function _dams_media_tracker_get_media($text) {
  $media_files = array();
  $raw_objects = array();
  $media_objects = array();

  // Part 1: Get all the tags.
  $text = ' ' . $text . ' ';
  preg_match_all("/\[\[(.*?)\]\]/s", $text, $media_files, PREG_PATTERN_ORDER);
  $media_files = $media_files[1];

  // Part 3: Get inline inserted media.
  $id_counter = count($media_files);
  preg_match_all('/<object[^>+]class="([^"]*)"[^>]*>/s', $text, $raw_objects, PREG_PATTERN_ORDER);
  $raw_objects = $raw_objects[1];
  foreach ($raw_objects as $object_info) {
    $object_options = explode(' ', $object_info);
    $media_object = array();
    foreach ($object_options as $option) {
      $options_details = explode('__', $option);
      // Check for file id.
      if (isset($options_details[1]) && $options_details[1] == 'fid') {
        $media_object['fid'] = $options_details[2];
      }
      // Check for view mode.
      if (isset($options_details[1]) && $options_details[1] == 'view_mode') {
        $media_object['view_mode'] = $options_details[2];
      }
    }

    // If the object was added via DAMS, count it.
    if (isset($media_object['fid']) && isset($media_object['view_mode'])) {
      $media_object['field'] = 'body';
      $media_object['format'] = 'wysiwyg(' . $media_object['view_mode'] . ')';
      $media_objects[$id_counter] = $media_object;
      $id_counter++;
    }
  }
  $result = $media_objects;

  // Part 3: Transform files in objects and add them to alread existing results.
  foreach ($media_files as $id => $file) {
    $media_object = drupal_json_decode($file);
    $media_object['field']  = 'body';
    $media_object['format'] = 'wysiwyg(' . $media_object['view_mode'] . ')';

    $result[$id] = $media_object;
  }

  return $result;
}

/**
 * Implements hook_node_update().
 */
function dams_media_tracker_node_update($node) {
  $media_objects = array();
  // Parse the body and get all the media files inserted.
  if (isset($node->field_ding_body) && isset($node->field_ding_body[LANGUAGE_NONE]) && !empty($node->field_ding_body[LANGUAGE_NONE][0]['value'])) {
    $media_objects = _dams_media_tracker_get_media($node->field_ding_body[LANGUAGE_NONE][0]['value']);
    db_delete('dams_media_tracker')
      ->condition('nid', $node->nid)
      ->condition('field_name', 'body')
      ->execute();
    foreach ($media_objects as $id => $object) {
      db_insert('dams_media_tracker')
        ->fields(array(
          'nid' => $node->nid,
          'fid' => $object['fid'],
          'format' => $object['format'],
          'item_order' => $id,
          'field_name' => $object['field'],
        ))
        ->execute();
    }
  }

  // Save tracking info for each field.
  $fields_info = field_info_instances('node', $node->type);
  foreach ($fields_info as $field_name => $field_info) {
    $field = $node->$field_name;

    $widget_active = !empty($field_info['widget']['active']) && $field_info['widget']['active'] == 1;
    $widget_module = !empty($field_info['widget']['module']) && $field_info['widget']['module'] == 'media';

    if ($widget_active && $widget_module && isset($field[LANGUAGE_NONE])) {
      db_delete('dams_media_tracker')
        ->condition('nid', $node->nid)
        ->condition('field_name', $field_name)
        ->execute();
      $field = $field[LANGUAGE_NONE];
      foreach ($field as $id => $item) {
        db_insert('dams_media_tracker')
          ->fields(array(
            'nid' => $node->nid,
            'fid' => $item['fid'],
            'format' => 'image',
            'item_order' => $id,
            'field_name' => $field_name,
          ))
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function dams_media_tracker_node_insert($node) {
  $media_objects = array();
  // Parse the body and get all the media files inserted.
  if (isset($node->field_ding_body) && isset($node->field_ding_body[LANGUAGE_NONE]) && !empty($node->field_ding_body[LANGUAGE_NONE][0]['value'])) {
    $media_objects = _dams_media_tracker_get_media($node->field_ding_body[LANGUAGE_NONE][0]['value']);
    foreach ($media_objects as $id => $object) {
      db_insert('dams_media_tracker')
        ->fields(array(
          'nid' => $node->nid,
          'fid' => $object['fid'],
          'format' => $object['format'],
          'item_order' => $id,
          'field_name' => $object['field'],
        ))
        ->execute();
    }
  }

  // Save tracking info for each field.
  $fields_info = field_info_instances('node', $node->type);
  foreach ($fields_info as $field_name => $field_info) {
    $field = array();
    if (isset($node->$field_name)) {
      $field = $node->$field_name;
    }

    $widget_active = !empty($field_info['widget']['active']) && $field_info['widget']['active'] == 1 ? TRUE : FALSE;
    $widget_module = !empty($field_info['widget']['module']) && $field_info['widget']['module'] == 'media' ? TRUE : FALSE;

    if ($widget_active && $widget_module && isset($field[LANGUAGE_NONE])) {
      $field = $field[LANGUAGE_NONE];
      foreach ($field as $id => $item) {
        db_insert('dams_media_tracker')
          ->fields(array(
            'nid' => $node->nid,
            'fid' => $item['fid'],
            'format' => 'image',
            'item_order' => $id,
            'field_name' => $field_name,
          ))
          ->execute();
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function dams_media_tracker_node_delete($node) {
  db_delete('dams_media_tracker')->condition('nid', $node->nid)->execute();
}


/**
 * Implements hook_media_browser_plugins_alter().
 */
function dams_media_tracker_media_browser_plugins_alter(&$plugins) {
  $plugin_names = array_keys($plugins);
  // NOTE: We use the fact that the displays were created in correct order.
  foreach ($plugin_names as $name) {
    drupal_add_js(drupal_get_path('module', 'ding_popup') . '/ding_popup.js');
    drupal_add_css(drupal_get_path('module', 'dams_media_tracker') . '/css/dams_media_tracker.css');
    drupal_add_js(drupal_get_path('module', 'dams_media_tracker') . '/js/dams_media_tracker.js');
  }
}

/**
 * Form to show the statistics.
 */
function dams_media_tracker_track_modal($file) {
  $form_state['file'] = $file;

  $popup_form = drupal_build_form('ding_media_track_form', $form_state);
  $output = drupal_render($popup_form);
  $response['#commands'][] = ajax_command_ding_popup('mkopac-reserve', t('Login to reserve'), 'hello');

  print $output;
  drupal_exit();
}

/**
 * Tracking results form.
 */
function ding_media_track_form($form, &$form_state) {
  $form = array();
  $file = $form_state['file'];

  // Correctly setup the file title.
  $title = $file->filename;
  if (isset($file->field_dams_title[LANGUAGE_NONE]) && !empty($file->field_dams_title[LANGUAGE_NONE][0])) {
    $title = $file->field_dams_title[LANGUAGE_NONE][0]['safe_value'];
  }
  $form['title'] = array(
    '#type' => 'markup',
    '#markup' => $title,
    '#prefix' => '<h2 class="file-title">',
    '#suffix' => '</h2>',
  );

  // Load all tracking information from DB.
  $nodes = db_select('dams_media_tracker', 'f')
    ->fields('f', array('nid', 'field_name', 'format'))
    ->condition('fid', $file->fid, '=')
    ->orderBy('f.nid')
    ->execute();
  $rows = array();
  while ($node = $nodes->fetchAssoc()) {
    // Format check.
    if ($node['format'] == '0') {
      $node['format'] = t('not available');
    }
    $sample_node = node_load($node['nid']);
    $rows[] = array(
      'data' => array(
        check_plain(node_type_get_name($sample_node->type)),
        l($sample_node->title, 'node/' . $sample_node->nid),
        date('Y-m-d H:i:s', $sample_node->created),
        $node['field_name'] . ' - ' . $node['format'],
      ),
    );
  }
  $table_content = array(
    'header' => array(
      t('Type'),
      t('Title'),
      t('Created date'),
      t('Used as (field - format)'),
    ),
    'rows' => $rows,
  );
  $form['tracking_info'] = array(
    '#markup' => theme('table', $table_content),
  );

  return $form;
}
